//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace PSC_ERP_Digitizing.Client.WebReference1 {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="DigitizingServiceSoap", Namespace="http://www.pscvietnam.com/")]
    public partial class DigitizingService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback SplitFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback QuickHelper_DownloadSourceFileLarge_ByFileNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchContent_StringOperationCompleted;
        
        private System.Threading.SendOrPostCallback IO_DeleteFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback IO_TryDeleteFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback IO_DeleteDirOperationCompleted;
        
        private System.Threading.SendOrPostCallback IO_TryDeleteDirOperationCompleted;
        
        private System.Threading.SendOrPostCallback IO_CreateDirectoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback IO_TryCreateDirectoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback Index_GetPdfContentOperationCompleted;
        
        private System.Threading.SendOrPostCallback Index_GetFileContentOperationCompleted;
        
        private System.Threading.SendOrPostCallback Index_DeleteDocIndexing_ByDocIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback IO_ExistsFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback IO_ExistsDirOperationCompleted;
        
        private System.Threading.SendOrPostCallback IO_MoveFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback IO_TryMoveFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback IO_RenameFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback IO_TryRenameFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback IO_RenameDirOperationCompleted;
        
        private System.Threading.SendOrPostCallback IO_TryRenameDirOperationCompleted;
        
        private System.Threading.SendOrPostCallback IO_MoveDirOperationCompleted;
        
        private System.Threading.SendOrPostCallback IO_TryMoveDirOperationCompleted;
        
        private System.Threading.SendOrPostCallback QuickHelper_DeleteHotFolderLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback QuickHelper_DeleteDocument_ByDocFileNameWithoutExtensionOperationCompleted;
        
        private System.Threading.SendOrPostCallback QuickHelper_CheckExistSourceFile_ByFileNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback QuickHelper_CheckExistConvertedFile_ByFileNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback QuickHelper_ResetIndexOperationCompleted;
        
        private System.Threading.SendOrPostCallback QuickHelper_GetFileContentOperationCompleted;
        
        private System.Threading.SendOrPostCallback QuickHelper_GetFileContent_StringOperationCompleted;
        
        private System.Threading.SendOrPostCallback QuickHelper_MakeFileIndexOperationCompleted;
        
        private System.Threading.SendOrPostCallback QuickHelper_DeleteIndex_ByDocFileNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback QuickHelper_DeleteIndex_ByDocIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback QuickHelper_SearchContentOperationCompleted;
        
        private System.Threading.SendOrPostCallback QuickHelper_SearchContent_StringOperationCompleted;
        
        private System.Threading.SendOrPostCallback QuickHelper_DownloadSourceFile_ByFileNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback QuickHelper_DownloadConvertedFile_ByFileNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback QuickHelper_UploadPdfFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback QuickHelper_UploadFileLargeSizeOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadPdfFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadFileLargeSizeOperationCompleted;
        
        private System.Threading.SendOrPostCallback DownloadFileOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public DigitizingService() {
            this.Url = global::PSC_ERP_Digitizing.Client.Properties.Settings.Default.PSC_Digitizing_Client_ServiceReference1_DigitizingService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event SplitFileCompletedEventHandler SplitFileCompleted;
        
        /// <remarks/>
        public event QuickHelper_DownloadSourceFileLarge_ByFileNameCompletedEventHandler QuickHelper_DownloadSourceFileLarge_ByFileNameCompleted;
        
        /// <remarks/>
        public event SearchContent_StringCompletedEventHandler SearchContent_StringCompleted;
        
        /// <remarks/>
        public event IO_DeleteFileCompletedEventHandler IO_DeleteFileCompleted;
        
        /// <remarks/>
        public event IO_TryDeleteFileCompletedEventHandler IO_TryDeleteFileCompleted;
        
        /// <remarks/>
        public event IO_DeleteDirCompletedEventHandler IO_DeleteDirCompleted;
        
        /// <remarks/>
        public event IO_TryDeleteDirCompletedEventHandler IO_TryDeleteDirCompleted;
        
        /// <remarks/>
        public event IO_CreateDirectoryCompletedEventHandler IO_CreateDirectoryCompleted;
        
        /// <remarks/>
        public event IO_TryCreateDirectoryCompletedEventHandler IO_TryCreateDirectoryCompleted;
        
        /// <remarks/>
        public event Index_GetPdfContentCompletedEventHandler Index_GetPdfContentCompleted;
        
        /// <remarks/>
        public event Index_GetFileContentCompletedEventHandler Index_GetFileContentCompleted;
        
        /// <remarks/>
        public event Index_DeleteDocIndexing_ByDocIdCompletedEventHandler Index_DeleteDocIndexing_ByDocIdCompleted;
        
        /// <remarks/>
        public event IO_ExistsFileCompletedEventHandler IO_ExistsFileCompleted;
        
        /// <remarks/>
        public event IO_ExistsDirCompletedEventHandler IO_ExistsDirCompleted;
        
        /// <remarks/>
        public event IO_MoveFileCompletedEventHandler IO_MoveFileCompleted;
        
        /// <remarks/>
        public event IO_TryMoveFileCompletedEventHandler IO_TryMoveFileCompleted;
        
        /// <remarks/>
        public event IO_RenameFileCompletedEventHandler IO_RenameFileCompleted;
        
        /// <remarks/>
        public event IO_TryRenameFileCompletedEventHandler IO_TryRenameFileCompleted;
        
        /// <remarks/>
        public event IO_RenameDirCompletedEventHandler IO_RenameDirCompleted;
        
        /// <remarks/>
        public event IO_TryRenameDirCompletedEventHandler IO_TryRenameDirCompleted;
        
        /// <remarks/>
        public event IO_MoveDirCompletedEventHandler IO_MoveDirCompleted;
        
        /// <remarks/>
        public event IO_TryMoveDirCompletedEventHandler IO_TryMoveDirCompleted;
        
        /// <remarks/>
        public event QuickHelper_DeleteHotFolderLogCompletedEventHandler QuickHelper_DeleteHotFolderLogCompleted;
        
        /// <remarks/>
        public event QuickHelper_DeleteDocument_ByDocFileNameWithoutExtensionCompletedEventHandler QuickHelper_DeleteDocument_ByDocFileNameWithoutExtensionCompleted;
        
        /// <remarks/>
        public event QuickHelper_CheckExistSourceFile_ByFileNameCompletedEventHandler QuickHelper_CheckExistSourceFile_ByFileNameCompleted;
        
        /// <remarks/>
        public event QuickHelper_CheckExistConvertedFile_ByFileNameCompletedEventHandler QuickHelper_CheckExistConvertedFile_ByFileNameCompleted;
        
        /// <remarks/>
        public event QuickHelper_ResetIndexCompletedEventHandler QuickHelper_ResetIndexCompleted;
        
        /// <remarks/>
        public event QuickHelper_GetFileContentCompletedEventHandler QuickHelper_GetFileContentCompleted;
        
        /// <remarks/>
        public event QuickHelper_GetFileContent_StringCompletedEventHandler QuickHelper_GetFileContent_StringCompleted;
        
        /// <remarks/>
        public event QuickHelper_MakeFileIndexCompletedEventHandler QuickHelper_MakeFileIndexCompleted;
        
        /// <remarks/>
        public event QuickHelper_DeleteIndex_ByDocFileNameCompletedEventHandler QuickHelper_DeleteIndex_ByDocFileNameCompleted;
        
        /// <remarks/>
        public event QuickHelper_DeleteIndex_ByDocIdCompletedEventHandler QuickHelper_DeleteIndex_ByDocIdCompleted;
        
        /// <remarks/>
        public event QuickHelper_SearchContentCompletedEventHandler QuickHelper_SearchContentCompleted;
        
        /// <remarks/>
        public event QuickHelper_SearchContent_StringCompletedEventHandler QuickHelper_SearchContent_StringCompleted;
        
        /// <remarks/>
        public event QuickHelper_DownloadSourceFile_ByFileNameCompletedEventHandler QuickHelper_DownloadSourceFile_ByFileNameCompleted;
        
        /// <remarks/>
        public event QuickHelper_DownloadConvertedFile_ByFileNameCompletedEventHandler QuickHelper_DownloadConvertedFile_ByFileNameCompleted;
        
        /// <remarks/>
        public event QuickHelper_UploadPdfFileCompletedEventHandler QuickHelper_UploadPdfFileCompleted;
        
        /// <remarks/>
        public event QuickHelper_UploadFileLargeSizeCompletedEventHandler QuickHelper_UploadFileLargeSizeCompleted;
        
        /// <remarks/>
        public event UploadPdfFileCompletedEventHandler UploadPdfFileCompleted;
        
        /// <remarks/>
        public event UploadFileLargeSizeCompletedEventHandler UploadFileLargeSizeCompleted;
        
        /// <remarks/>
        public event DownloadFileCompletedEventHandler DownloadFileCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.pscvietnam.com/SplitFile", RequestNamespace="http://www.pscvietnam.com/", ResponseNamespace="http://www.pscvietnam.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SplitFile(string publicKey, string token, string fileName, string maPhanHe) {
            object[] results = this.Invoke("SplitFile", new object[] {
                        publicKey,
                        token,
                        fileName,
                        maPhanHe});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SplitFileAsync(string publicKey, string token, string fileName, string maPhanHe) {
            this.SplitFileAsync(publicKey, token, fileName, maPhanHe, null);
        }
        
        /// <remarks/>
        public void SplitFileAsync(string publicKey, string token, string fileName, string maPhanHe, object userState) {
            if ((this.SplitFileOperationCompleted == null)) {
                this.SplitFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSplitFileOperationCompleted);
            }
            this.InvokeAsync("SplitFile", new object[] {
                        publicKey,
                        token,
                        fileName,
                        maPhanHe}, this.SplitFileOperationCompleted, userState);
        }
        
        private void OnSplitFileOperationCompleted(object arg) {
            if ((this.SplitFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SplitFileCompleted(this, new SplitFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.pscvietnam.com/QuickHelper_DownloadSourceFileLarge_ByFileName", RequestNamespace="http://www.pscvietnam.com/", ResponseNamespace="http://www.pscvietnam.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] QuickHelper_DownloadSourceFileLarge_ByFileName(string publicKey, string token, string fileName, string maPhanHe, long offset) {
            object[] results = this.Invoke("QuickHelper_DownloadSourceFileLarge_ByFileName", new object[] {
                        publicKey,
                        token,
                        fileName,
                        maPhanHe,
                        offset});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void QuickHelper_DownloadSourceFileLarge_ByFileNameAsync(string publicKey, string token, string fileName, string maPhanHe, long offset) {
            this.QuickHelper_DownloadSourceFileLarge_ByFileNameAsync(publicKey, token, fileName, maPhanHe, offset, null);
        }
        
        /// <remarks/>
        public void QuickHelper_DownloadSourceFileLarge_ByFileNameAsync(string publicKey, string token, string fileName, string maPhanHe, long offset, object userState) {
            if ((this.QuickHelper_DownloadSourceFileLarge_ByFileNameOperationCompleted == null)) {
                this.QuickHelper_DownloadSourceFileLarge_ByFileNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQuickHelper_DownloadSourceFileLarge_ByFileNameOperationCompleted);
            }
            this.InvokeAsync("QuickHelper_DownloadSourceFileLarge_ByFileName", new object[] {
                        publicKey,
                        token,
                        fileName,
                        maPhanHe,
                        offset}, this.QuickHelper_DownloadSourceFileLarge_ByFileNameOperationCompleted, userState);
        }
        
        private void OnQuickHelper_DownloadSourceFileLarge_ByFileNameOperationCompleted(object arg) {
            if ((this.QuickHelper_DownloadSourceFileLarge_ByFileNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QuickHelper_DownloadSourceFileLarge_ByFileNameCompleted(this, new QuickHelper_DownloadSourceFileLarge_ByFileNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.pscvietnam.com/SearchContent_String", RequestNamespace="http://www.pscvietnam.com/", ResponseNamespace="http://www.pscvietnam.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public IndexPackage[] SearchContent_String(string publicKey, string token, string content, string documentMiningIndexingPath) {
            object[] results = this.Invoke("SearchContent_String", new object[] {
                        publicKey,
                        token,
                        content,
                        documentMiningIndexingPath});
            return ((IndexPackage[])(results[0]));
        }
        
        /// <remarks/>
        public void SearchContent_StringAsync(string publicKey, string token, string content, string documentMiningIndexingPath) {
            this.SearchContent_StringAsync(publicKey, token, content, documentMiningIndexingPath, null);
        }
        
        /// <remarks/>
        public void SearchContent_StringAsync(string publicKey, string token, string content, string documentMiningIndexingPath, object userState) {
            if ((this.SearchContent_StringOperationCompleted == null)) {
                this.SearchContent_StringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchContent_StringOperationCompleted);
            }
            this.InvokeAsync("SearchContent_String", new object[] {
                        publicKey,
                        token,
                        content,
                        documentMiningIndexingPath}, this.SearchContent_StringOperationCompleted, userState);
        }
        
        private void OnSearchContent_StringOperationCompleted(object arg) {
            if ((this.SearchContent_StringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchContent_StringCompleted(this, new SearchContent_StringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.pscvietnam.com/IO_DeleteFile", RequestNamespace="http://www.pscvietnam.com/", ResponseNamespace="http://www.pscvietnam.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void IO_DeleteFile(string publicKey, string token, string filePath) {
            this.Invoke("IO_DeleteFile", new object[] {
                        publicKey,
                        token,
                        filePath});
        }
        
        /// <remarks/>
        public void IO_DeleteFileAsync(string publicKey, string token, string filePath) {
            this.IO_DeleteFileAsync(publicKey, token, filePath, null);
        }
        
        /// <remarks/>
        public void IO_DeleteFileAsync(string publicKey, string token, string filePath, object userState) {
            if ((this.IO_DeleteFileOperationCompleted == null)) {
                this.IO_DeleteFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIO_DeleteFileOperationCompleted);
            }
            this.InvokeAsync("IO_DeleteFile", new object[] {
                        publicKey,
                        token,
                        filePath}, this.IO_DeleteFileOperationCompleted, userState);
        }
        
        private void OnIO_DeleteFileOperationCompleted(object arg) {
            if ((this.IO_DeleteFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IO_DeleteFileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.pscvietnam.com/IO_TryDeleteFile", RequestNamespace="http://www.pscvietnam.com/", ResponseNamespace="http://www.pscvietnam.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IO_TryDeleteFile(string publicKey, string token, string filePath) {
            object[] results = this.Invoke("IO_TryDeleteFile", new object[] {
                        publicKey,
                        token,
                        filePath});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IO_TryDeleteFileAsync(string publicKey, string token, string filePath) {
            this.IO_TryDeleteFileAsync(publicKey, token, filePath, null);
        }
        
        /// <remarks/>
        public void IO_TryDeleteFileAsync(string publicKey, string token, string filePath, object userState) {
            if ((this.IO_TryDeleteFileOperationCompleted == null)) {
                this.IO_TryDeleteFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIO_TryDeleteFileOperationCompleted);
            }
            this.InvokeAsync("IO_TryDeleteFile", new object[] {
                        publicKey,
                        token,
                        filePath}, this.IO_TryDeleteFileOperationCompleted, userState);
        }
        
        private void OnIO_TryDeleteFileOperationCompleted(object arg) {
            if ((this.IO_TryDeleteFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IO_TryDeleteFileCompleted(this, new IO_TryDeleteFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.pscvietnam.com/IO_DeleteDir", RequestNamespace="http://www.pscvietnam.com/", ResponseNamespace="http://www.pscvietnam.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void IO_DeleteDir(string publicKey, string token, string dirPath) {
            this.Invoke("IO_DeleteDir", new object[] {
                        publicKey,
                        token,
                        dirPath});
        }
        
        /// <remarks/>
        public void IO_DeleteDirAsync(string publicKey, string token, string dirPath) {
            this.IO_DeleteDirAsync(publicKey, token, dirPath, null);
        }
        
        /// <remarks/>
        public void IO_DeleteDirAsync(string publicKey, string token, string dirPath, object userState) {
            if ((this.IO_DeleteDirOperationCompleted == null)) {
                this.IO_DeleteDirOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIO_DeleteDirOperationCompleted);
            }
            this.InvokeAsync("IO_DeleteDir", new object[] {
                        publicKey,
                        token,
                        dirPath}, this.IO_DeleteDirOperationCompleted, userState);
        }
        
        private void OnIO_DeleteDirOperationCompleted(object arg) {
            if ((this.IO_DeleteDirCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IO_DeleteDirCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.pscvietnam.com/IO_TryDeleteDir", RequestNamespace="http://www.pscvietnam.com/", ResponseNamespace="http://www.pscvietnam.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IO_TryDeleteDir(string publicKey, string token, string dirPath) {
            object[] results = this.Invoke("IO_TryDeleteDir", new object[] {
                        publicKey,
                        token,
                        dirPath});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IO_TryDeleteDirAsync(string publicKey, string token, string dirPath) {
            this.IO_TryDeleteDirAsync(publicKey, token, dirPath, null);
        }
        
        /// <remarks/>
        public void IO_TryDeleteDirAsync(string publicKey, string token, string dirPath, object userState) {
            if ((this.IO_TryDeleteDirOperationCompleted == null)) {
                this.IO_TryDeleteDirOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIO_TryDeleteDirOperationCompleted);
            }
            this.InvokeAsync("IO_TryDeleteDir", new object[] {
                        publicKey,
                        token,
                        dirPath}, this.IO_TryDeleteDirOperationCompleted, userState);
        }
        
        private void OnIO_TryDeleteDirOperationCompleted(object arg) {
            if ((this.IO_TryDeleteDirCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IO_TryDeleteDirCompleted(this, new IO_TryDeleteDirCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.pscvietnam.com/IO_CreateDirectory", RequestNamespace="http://www.pscvietnam.com/", ResponseNamespace="http://www.pscvietnam.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void IO_CreateDirectory(string publicKey, string token, string dirPath) {
            this.Invoke("IO_CreateDirectory", new object[] {
                        publicKey,
                        token,
                        dirPath});
        }
        
        /// <remarks/>
        public void IO_CreateDirectoryAsync(string publicKey, string token, string dirPath) {
            this.IO_CreateDirectoryAsync(publicKey, token, dirPath, null);
        }
        
        /// <remarks/>
        public void IO_CreateDirectoryAsync(string publicKey, string token, string dirPath, object userState) {
            if ((this.IO_CreateDirectoryOperationCompleted == null)) {
                this.IO_CreateDirectoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIO_CreateDirectoryOperationCompleted);
            }
            this.InvokeAsync("IO_CreateDirectory", new object[] {
                        publicKey,
                        token,
                        dirPath}, this.IO_CreateDirectoryOperationCompleted, userState);
        }
        
        private void OnIO_CreateDirectoryOperationCompleted(object arg) {
            if ((this.IO_CreateDirectoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IO_CreateDirectoryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.pscvietnam.com/IO_TryCreateDirectory", RequestNamespace="http://www.pscvietnam.com/", ResponseNamespace="http://www.pscvietnam.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void IO_TryCreateDirectory(string publicKey, string token, string dirPath) {
            this.Invoke("IO_TryCreateDirectory", new object[] {
                        publicKey,
                        token,
                        dirPath});
        }
        
        /// <remarks/>
        public void IO_TryCreateDirectoryAsync(string publicKey, string token, string dirPath) {
            this.IO_TryCreateDirectoryAsync(publicKey, token, dirPath, null);
        }
        
        /// <remarks/>
        public void IO_TryCreateDirectoryAsync(string publicKey, string token, string dirPath, object userState) {
            if ((this.IO_TryCreateDirectoryOperationCompleted == null)) {
                this.IO_TryCreateDirectoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIO_TryCreateDirectoryOperationCompleted);
            }
            this.InvokeAsync("IO_TryCreateDirectory", new object[] {
                        publicKey,
                        token,
                        dirPath}, this.IO_TryCreateDirectoryOperationCompleted, userState);
        }
        
        private void OnIO_TryCreateDirectoryOperationCompleted(object arg) {
            if ((this.IO_TryCreateDirectoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IO_TryCreateDirectoryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.pscvietnam.com/Index_GetPdfContent", RequestNamespace="http://www.pscvietnam.com/", ResponseNamespace="http://www.pscvietnam.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Index_GetPdfContent(string publicKey, string token, string filePath, string pdfPass) {
            object[] results = this.Invoke("Index_GetPdfContent", new object[] {
                        publicKey,
                        token,
                        filePath,
                        pdfPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Index_GetPdfContentAsync(string publicKey, string token, string filePath, string pdfPass) {
            this.Index_GetPdfContentAsync(publicKey, token, filePath, pdfPass, null);
        }
        
        /// <remarks/>
        public void Index_GetPdfContentAsync(string publicKey, string token, string filePath, string pdfPass, object userState) {
            if ((this.Index_GetPdfContentOperationCompleted == null)) {
                this.Index_GetPdfContentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIndex_GetPdfContentOperationCompleted);
            }
            this.InvokeAsync("Index_GetPdfContent", new object[] {
                        publicKey,
                        token,
                        filePath,
                        pdfPass}, this.Index_GetPdfContentOperationCompleted, userState);
        }
        
        private void OnIndex_GetPdfContentOperationCompleted(object arg) {
            if ((this.Index_GetPdfContentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Index_GetPdfContentCompleted(this, new Index_GetPdfContentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.pscvietnam.com/Index_GetFileContent", RequestNamespace="http://www.pscvietnam.com/", ResponseNamespace="http://www.pscvietnam.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Index_GetFileContent(string publicKey, string token, string filePath) {
            object[] results = this.Invoke("Index_GetFileContent", new object[] {
                        publicKey,
                        token,
                        filePath});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Index_GetFileContentAsync(string publicKey, string token, string filePath) {
            this.Index_GetFileContentAsync(publicKey, token, filePath, null);
        }
        
        /// <remarks/>
        public void Index_GetFileContentAsync(string publicKey, string token, string filePath, object userState) {
            if ((this.Index_GetFileContentOperationCompleted == null)) {
                this.Index_GetFileContentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIndex_GetFileContentOperationCompleted);
            }
            this.InvokeAsync("Index_GetFileContent", new object[] {
                        publicKey,
                        token,
                        filePath}, this.Index_GetFileContentOperationCompleted, userState);
        }
        
        private void OnIndex_GetFileContentOperationCompleted(object arg) {
            if ((this.Index_GetFileContentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Index_GetFileContentCompleted(this, new Index_GetFileContentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.pscvietnam.com/Index_DeleteDocIndexing_ByDocId", RequestNamespace="http://www.pscvietnam.com/", ResponseNamespace="http://www.pscvietnam.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Index_DeleteDocIndexing_ByDocId(string publicKey, string token, string docId, string directoryIndexing) {
            this.Invoke("Index_DeleteDocIndexing_ByDocId", new object[] {
                        publicKey,
                        token,
                        docId,
                        directoryIndexing});
        }
        
        /// <remarks/>
        public void Index_DeleteDocIndexing_ByDocIdAsync(string publicKey, string token, string docId, string directoryIndexing) {
            this.Index_DeleteDocIndexing_ByDocIdAsync(publicKey, token, docId, directoryIndexing, null);
        }
        
        /// <remarks/>
        public void Index_DeleteDocIndexing_ByDocIdAsync(string publicKey, string token, string docId, string directoryIndexing, object userState) {
            if ((this.Index_DeleteDocIndexing_ByDocIdOperationCompleted == null)) {
                this.Index_DeleteDocIndexing_ByDocIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIndex_DeleteDocIndexing_ByDocIdOperationCompleted);
            }
            this.InvokeAsync("Index_DeleteDocIndexing_ByDocId", new object[] {
                        publicKey,
                        token,
                        docId,
                        directoryIndexing}, this.Index_DeleteDocIndexing_ByDocIdOperationCompleted, userState);
        }
        
        private void OnIndex_DeleteDocIndexing_ByDocIdOperationCompleted(object arg) {
            if ((this.Index_DeleteDocIndexing_ByDocIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Index_DeleteDocIndexing_ByDocIdCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.pscvietnam.com/IO_ExistsFile", RequestNamespace="http://www.pscvietnam.com/", ResponseNamespace="http://www.pscvietnam.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IO_ExistsFile(string publicKey, string token, string filePath) {
            object[] results = this.Invoke("IO_ExistsFile", new object[] {
                        publicKey,
                        token,
                        filePath});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IO_ExistsFileAsync(string publicKey, string token, string filePath) {
            this.IO_ExistsFileAsync(publicKey, token, filePath, null);
        }
        
        /// <remarks/>
        public void IO_ExistsFileAsync(string publicKey, string token, string filePath, object userState) {
            if ((this.IO_ExistsFileOperationCompleted == null)) {
                this.IO_ExistsFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIO_ExistsFileOperationCompleted);
            }
            this.InvokeAsync("IO_ExistsFile", new object[] {
                        publicKey,
                        token,
                        filePath}, this.IO_ExistsFileOperationCompleted, userState);
        }
        
        private void OnIO_ExistsFileOperationCompleted(object arg) {
            if ((this.IO_ExistsFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IO_ExistsFileCompleted(this, new IO_ExistsFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.pscvietnam.com/IO_ExistsDir", RequestNamespace="http://www.pscvietnam.com/", ResponseNamespace="http://www.pscvietnam.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IO_ExistsDir(string publicKey, string token, string dirPath) {
            object[] results = this.Invoke("IO_ExistsDir", new object[] {
                        publicKey,
                        token,
                        dirPath});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IO_ExistsDirAsync(string publicKey, string token, string dirPath) {
            this.IO_ExistsDirAsync(publicKey, token, dirPath, null);
        }
        
        /// <remarks/>
        public void IO_ExistsDirAsync(string publicKey, string token, string dirPath, object userState) {
            if ((this.IO_ExistsDirOperationCompleted == null)) {
                this.IO_ExistsDirOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIO_ExistsDirOperationCompleted);
            }
            this.InvokeAsync("IO_ExistsDir", new object[] {
                        publicKey,
                        token,
                        dirPath}, this.IO_ExistsDirOperationCompleted, userState);
        }
        
        private void OnIO_ExistsDirOperationCompleted(object arg) {
            if ((this.IO_ExistsDirCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IO_ExistsDirCompleted(this, new IO_ExistsDirCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.pscvietnam.com/IO_MoveFile", RequestNamespace="http://www.pscvietnam.com/", ResponseNamespace="http://www.pscvietnam.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void IO_MoveFile(string publicKey, string token, string sourceFilePath, string destFilePath) {
            this.Invoke("IO_MoveFile", new object[] {
                        publicKey,
                        token,
                        sourceFilePath,
                        destFilePath});
        }
        
        /// <remarks/>
        public void IO_MoveFileAsync(string publicKey, string token, string sourceFilePath, string destFilePath) {
            this.IO_MoveFileAsync(publicKey, token, sourceFilePath, destFilePath, null);
        }
        
        /// <remarks/>
        public void IO_MoveFileAsync(string publicKey, string token, string sourceFilePath, string destFilePath, object userState) {
            if ((this.IO_MoveFileOperationCompleted == null)) {
                this.IO_MoveFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIO_MoveFileOperationCompleted);
            }
            this.InvokeAsync("IO_MoveFile", new object[] {
                        publicKey,
                        token,
                        sourceFilePath,
                        destFilePath}, this.IO_MoveFileOperationCompleted, userState);
        }
        
        private void OnIO_MoveFileOperationCompleted(object arg) {
            if ((this.IO_MoveFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IO_MoveFileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.pscvietnam.com/IO_TryMoveFile", RequestNamespace="http://www.pscvietnam.com/", ResponseNamespace="http://www.pscvietnam.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IO_TryMoveFile(string publicKey, string token, string sourceFilePath, string destFilePath) {
            object[] results = this.Invoke("IO_TryMoveFile", new object[] {
                        publicKey,
                        token,
                        sourceFilePath,
                        destFilePath});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IO_TryMoveFileAsync(string publicKey, string token, string sourceFilePath, string destFilePath) {
            this.IO_TryMoveFileAsync(publicKey, token, sourceFilePath, destFilePath, null);
        }
        
        /// <remarks/>
        public void IO_TryMoveFileAsync(string publicKey, string token, string sourceFilePath, string destFilePath, object userState) {
            if ((this.IO_TryMoveFileOperationCompleted == null)) {
                this.IO_TryMoveFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIO_TryMoveFileOperationCompleted);
            }
            this.InvokeAsync("IO_TryMoveFile", new object[] {
                        publicKey,
                        token,
                        sourceFilePath,
                        destFilePath}, this.IO_TryMoveFileOperationCompleted, userState);
        }
        
        private void OnIO_TryMoveFileOperationCompleted(object arg) {
            if ((this.IO_TryMoveFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IO_TryMoveFileCompleted(this, new IO_TryMoveFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.pscvietnam.com/IO_RenameFile", RequestNamespace="http://www.pscvietnam.com/", ResponseNamespace="http://www.pscvietnam.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void IO_RenameFile(string publicKey, string token, string filePath, string newFileName) {
            this.Invoke("IO_RenameFile", new object[] {
                        publicKey,
                        token,
                        filePath,
                        newFileName});
        }
        
        /// <remarks/>
        public void IO_RenameFileAsync(string publicKey, string token, string filePath, string newFileName) {
            this.IO_RenameFileAsync(publicKey, token, filePath, newFileName, null);
        }
        
        /// <remarks/>
        public void IO_RenameFileAsync(string publicKey, string token, string filePath, string newFileName, object userState) {
            if ((this.IO_RenameFileOperationCompleted == null)) {
                this.IO_RenameFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIO_RenameFileOperationCompleted);
            }
            this.InvokeAsync("IO_RenameFile", new object[] {
                        publicKey,
                        token,
                        filePath,
                        newFileName}, this.IO_RenameFileOperationCompleted, userState);
        }
        
        private void OnIO_RenameFileOperationCompleted(object arg) {
            if ((this.IO_RenameFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IO_RenameFileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.pscvietnam.com/IO_TryRenameFile", RequestNamespace="http://www.pscvietnam.com/", ResponseNamespace="http://www.pscvietnam.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IO_TryRenameFile(string publicKey, string token, string filePath, string newFileName) {
            object[] results = this.Invoke("IO_TryRenameFile", new object[] {
                        publicKey,
                        token,
                        filePath,
                        newFileName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IO_TryRenameFileAsync(string publicKey, string token, string filePath, string newFileName) {
            this.IO_TryRenameFileAsync(publicKey, token, filePath, newFileName, null);
        }
        
        /// <remarks/>
        public void IO_TryRenameFileAsync(string publicKey, string token, string filePath, string newFileName, object userState) {
            if ((this.IO_TryRenameFileOperationCompleted == null)) {
                this.IO_TryRenameFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIO_TryRenameFileOperationCompleted);
            }
            this.InvokeAsync("IO_TryRenameFile", new object[] {
                        publicKey,
                        token,
                        filePath,
                        newFileName}, this.IO_TryRenameFileOperationCompleted, userState);
        }
        
        private void OnIO_TryRenameFileOperationCompleted(object arg) {
            if ((this.IO_TryRenameFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IO_TryRenameFileCompleted(this, new IO_TryRenameFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.pscvietnam.com/IO_RenameDir", RequestNamespace="http://www.pscvietnam.com/", ResponseNamespace="http://www.pscvietnam.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void IO_RenameDir(string publicKey, string token, string directoryPath, string newDirectoryName) {
            this.Invoke("IO_RenameDir", new object[] {
                        publicKey,
                        token,
                        directoryPath,
                        newDirectoryName});
        }
        
        /// <remarks/>
        public void IO_RenameDirAsync(string publicKey, string token, string directoryPath, string newDirectoryName) {
            this.IO_RenameDirAsync(publicKey, token, directoryPath, newDirectoryName, null);
        }
        
        /// <remarks/>
        public void IO_RenameDirAsync(string publicKey, string token, string directoryPath, string newDirectoryName, object userState) {
            if ((this.IO_RenameDirOperationCompleted == null)) {
                this.IO_RenameDirOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIO_RenameDirOperationCompleted);
            }
            this.InvokeAsync("IO_RenameDir", new object[] {
                        publicKey,
                        token,
                        directoryPath,
                        newDirectoryName}, this.IO_RenameDirOperationCompleted, userState);
        }
        
        private void OnIO_RenameDirOperationCompleted(object arg) {
            if ((this.IO_RenameDirCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IO_RenameDirCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.pscvietnam.com/IO_TryRenameDir", RequestNamespace="http://www.pscvietnam.com/", ResponseNamespace="http://www.pscvietnam.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IO_TryRenameDir(string publicKey, string token, string directoryPath, string newDirectoryName) {
            object[] results = this.Invoke("IO_TryRenameDir", new object[] {
                        publicKey,
                        token,
                        directoryPath,
                        newDirectoryName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IO_TryRenameDirAsync(string publicKey, string token, string directoryPath, string newDirectoryName) {
            this.IO_TryRenameDirAsync(publicKey, token, directoryPath, newDirectoryName, null);
        }
        
        /// <remarks/>
        public void IO_TryRenameDirAsync(string publicKey, string token, string directoryPath, string newDirectoryName, object userState) {
            if ((this.IO_TryRenameDirOperationCompleted == null)) {
                this.IO_TryRenameDirOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIO_TryRenameDirOperationCompleted);
            }
            this.InvokeAsync("IO_TryRenameDir", new object[] {
                        publicKey,
                        token,
                        directoryPath,
                        newDirectoryName}, this.IO_TryRenameDirOperationCompleted, userState);
        }
        
        private void OnIO_TryRenameDirOperationCompleted(object arg) {
            if ((this.IO_TryRenameDirCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IO_TryRenameDirCompleted(this, new IO_TryRenameDirCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.pscvietnam.com/IO_MoveDir", RequestNamespace="http://www.pscvietnam.com/", ResponseNamespace="http://www.pscvietnam.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void IO_MoveDir(string publicKey, string token, string sourceDirPath, string destDirPath) {
            this.Invoke("IO_MoveDir", new object[] {
                        publicKey,
                        token,
                        sourceDirPath,
                        destDirPath});
        }
        
        /// <remarks/>
        public void IO_MoveDirAsync(string publicKey, string token, string sourceDirPath, string destDirPath) {
            this.IO_MoveDirAsync(publicKey, token, sourceDirPath, destDirPath, null);
        }
        
        /// <remarks/>
        public void IO_MoveDirAsync(string publicKey, string token, string sourceDirPath, string destDirPath, object userState) {
            if ((this.IO_MoveDirOperationCompleted == null)) {
                this.IO_MoveDirOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIO_MoveDirOperationCompleted);
            }
            this.InvokeAsync("IO_MoveDir", new object[] {
                        publicKey,
                        token,
                        sourceDirPath,
                        destDirPath}, this.IO_MoveDirOperationCompleted, userState);
        }
        
        private void OnIO_MoveDirOperationCompleted(object arg) {
            if ((this.IO_MoveDirCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IO_MoveDirCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.pscvietnam.com/IO_TryMoveDir", RequestNamespace="http://www.pscvietnam.com/", ResponseNamespace="http://www.pscvietnam.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IO_TryMoveDir(string publicKey, string token, string sourceDirPath, string destDirPath) {
            object[] results = this.Invoke("IO_TryMoveDir", new object[] {
                        publicKey,
                        token,
                        sourceDirPath,
                        destDirPath});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IO_TryMoveDirAsync(string publicKey, string token, string sourceDirPath, string destDirPath) {
            this.IO_TryMoveDirAsync(publicKey, token, sourceDirPath, destDirPath, null);
        }
        
        /// <remarks/>
        public void IO_TryMoveDirAsync(string publicKey, string token, string sourceDirPath, string destDirPath, object userState) {
            if ((this.IO_TryMoveDirOperationCompleted == null)) {
                this.IO_TryMoveDirOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIO_TryMoveDirOperationCompleted);
            }
            this.InvokeAsync("IO_TryMoveDir", new object[] {
                        publicKey,
                        token,
                        sourceDirPath,
                        destDirPath}, this.IO_TryMoveDirOperationCompleted, userState);
        }
        
        private void OnIO_TryMoveDirOperationCompleted(object arg) {
            if ((this.IO_TryMoveDirCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IO_TryMoveDirCompleted(this, new IO_TryMoveDirCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.pscvietnam.com/QuickHelper_DeleteHotFolderLog", RequestNamespace="http://www.pscvietnam.com/", ResponseNamespace="http://www.pscvietnam.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void QuickHelper_DeleteHotFolderLog(string publicKey, string token) {
            this.Invoke("QuickHelper_DeleteHotFolderLog", new object[] {
                        publicKey,
                        token});
        }
        
        /// <remarks/>
        public void QuickHelper_DeleteHotFolderLogAsync(string publicKey, string token) {
            this.QuickHelper_DeleteHotFolderLogAsync(publicKey, token, null);
        }
        
        /// <remarks/>
        public void QuickHelper_DeleteHotFolderLogAsync(string publicKey, string token, object userState) {
            if ((this.QuickHelper_DeleteHotFolderLogOperationCompleted == null)) {
                this.QuickHelper_DeleteHotFolderLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQuickHelper_DeleteHotFolderLogOperationCompleted);
            }
            this.InvokeAsync("QuickHelper_DeleteHotFolderLog", new object[] {
                        publicKey,
                        token}, this.QuickHelper_DeleteHotFolderLogOperationCompleted, userState);
        }
        
        private void OnQuickHelper_DeleteHotFolderLogOperationCompleted(object arg) {
            if ((this.QuickHelper_DeleteHotFolderLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QuickHelper_DeleteHotFolderLogCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.pscvietnam.com/QuickHelper_DeleteDocument_ByDocFileNameWithoutExtensio" +
            "n", RequestNamespace="http://www.pscvietnam.com/", ResponseNamespace="http://www.pscvietnam.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void QuickHelper_DeleteDocument_ByDocFileNameWithoutExtension(string publicKey, string token, string fileNameWithoutExtension) {
            this.Invoke("QuickHelper_DeleteDocument_ByDocFileNameWithoutExtension", new object[] {
                        publicKey,
                        token,
                        fileNameWithoutExtension});
        }
        
        /// <remarks/>
        public void QuickHelper_DeleteDocument_ByDocFileNameWithoutExtensionAsync(string publicKey, string token, string fileNameWithoutExtension) {
            this.QuickHelper_DeleteDocument_ByDocFileNameWithoutExtensionAsync(publicKey, token, fileNameWithoutExtension, null);
        }
        
        /// <remarks/>
        public void QuickHelper_DeleteDocument_ByDocFileNameWithoutExtensionAsync(string publicKey, string token, string fileNameWithoutExtension, object userState) {
            if ((this.QuickHelper_DeleteDocument_ByDocFileNameWithoutExtensionOperationCompleted == null)) {
                this.QuickHelper_DeleteDocument_ByDocFileNameWithoutExtensionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQuickHelper_DeleteDocument_ByDocFileNameWithoutExtensionOperationCompleted);
            }
            this.InvokeAsync("QuickHelper_DeleteDocument_ByDocFileNameWithoutExtension", new object[] {
                        publicKey,
                        token,
                        fileNameWithoutExtension}, this.QuickHelper_DeleteDocument_ByDocFileNameWithoutExtensionOperationCompleted, userState);
        }
        
        private void OnQuickHelper_DeleteDocument_ByDocFileNameWithoutExtensionOperationCompleted(object arg) {
            if ((this.QuickHelper_DeleteDocument_ByDocFileNameWithoutExtensionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QuickHelper_DeleteDocument_ByDocFileNameWithoutExtensionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.pscvietnam.com/QuickHelper_CheckExistSourceFile_ByFileName", RequestNamespace="http://www.pscvietnam.com/", ResponseNamespace="http://www.pscvietnam.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool QuickHelper_CheckExistSourceFile_ByFileName(string publicKey, string token, string fileNameWithExtension) {
            object[] results = this.Invoke("QuickHelper_CheckExistSourceFile_ByFileName", new object[] {
                        publicKey,
                        token,
                        fileNameWithExtension});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void QuickHelper_CheckExistSourceFile_ByFileNameAsync(string publicKey, string token, string fileNameWithExtension) {
            this.QuickHelper_CheckExistSourceFile_ByFileNameAsync(publicKey, token, fileNameWithExtension, null);
        }
        
        /// <remarks/>
        public void QuickHelper_CheckExistSourceFile_ByFileNameAsync(string publicKey, string token, string fileNameWithExtension, object userState) {
            if ((this.QuickHelper_CheckExistSourceFile_ByFileNameOperationCompleted == null)) {
                this.QuickHelper_CheckExistSourceFile_ByFileNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQuickHelper_CheckExistSourceFile_ByFileNameOperationCompleted);
            }
            this.InvokeAsync("QuickHelper_CheckExistSourceFile_ByFileName", new object[] {
                        publicKey,
                        token,
                        fileNameWithExtension}, this.QuickHelper_CheckExistSourceFile_ByFileNameOperationCompleted, userState);
        }
        
        private void OnQuickHelper_CheckExistSourceFile_ByFileNameOperationCompleted(object arg) {
            if ((this.QuickHelper_CheckExistSourceFile_ByFileNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QuickHelper_CheckExistSourceFile_ByFileNameCompleted(this, new QuickHelper_CheckExistSourceFile_ByFileNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.pscvietnam.com/QuickHelper_CheckExistConvertedFile_ByFileName", RequestNamespace="http://www.pscvietnam.com/", ResponseNamespace="http://www.pscvietnam.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool QuickHelper_CheckExistConvertedFile_ByFileName(string publicKey, string token, string fileNameWithExtension) {
            object[] results = this.Invoke("QuickHelper_CheckExistConvertedFile_ByFileName", new object[] {
                        publicKey,
                        token,
                        fileNameWithExtension});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void QuickHelper_CheckExistConvertedFile_ByFileNameAsync(string publicKey, string token, string fileNameWithExtension) {
            this.QuickHelper_CheckExistConvertedFile_ByFileNameAsync(publicKey, token, fileNameWithExtension, null);
        }
        
        /// <remarks/>
        public void QuickHelper_CheckExistConvertedFile_ByFileNameAsync(string publicKey, string token, string fileNameWithExtension, object userState) {
            if ((this.QuickHelper_CheckExistConvertedFile_ByFileNameOperationCompleted == null)) {
                this.QuickHelper_CheckExistConvertedFile_ByFileNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQuickHelper_CheckExistConvertedFile_ByFileNameOperationCompleted);
            }
            this.InvokeAsync("QuickHelper_CheckExistConvertedFile_ByFileName", new object[] {
                        publicKey,
                        token,
                        fileNameWithExtension}, this.QuickHelper_CheckExistConvertedFile_ByFileNameOperationCompleted, userState);
        }
        
        private void OnQuickHelper_CheckExistConvertedFile_ByFileNameOperationCompleted(object arg) {
            if ((this.QuickHelper_CheckExistConvertedFile_ByFileNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QuickHelper_CheckExistConvertedFile_ByFileNameCompleted(this, new QuickHelper_CheckExistConvertedFile_ByFileNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.pscvietnam.com/QuickHelper_ResetIndex", RequestNamespace="http://www.pscvietnam.com/", ResponseNamespace="http://www.pscvietnam.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void QuickHelper_ResetIndex(string publicKey, string token) {
            this.Invoke("QuickHelper_ResetIndex", new object[] {
                        publicKey,
                        token});
        }
        
        /// <remarks/>
        public void QuickHelper_ResetIndexAsync(string publicKey, string token) {
            this.QuickHelper_ResetIndexAsync(publicKey, token, null);
        }
        
        /// <remarks/>
        public void QuickHelper_ResetIndexAsync(string publicKey, string token, object userState) {
            if ((this.QuickHelper_ResetIndexOperationCompleted == null)) {
                this.QuickHelper_ResetIndexOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQuickHelper_ResetIndexOperationCompleted);
            }
            this.InvokeAsync("QuickHelper_ResetIndex", new object[] {
                        publicKey,
                        token}, this.QuickHelper_ResetIndexOperationCompleted, userState);
        }
        
        private void OnQuickHelper_ResetIndexOperationCompleted(object arg) {
            if ((this.QuickHelper_ResetIndexCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QuickHelper_ResetIndexCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.pscvietnam.com/QuickHelper_GetFileContent", RequestNamespace="http://www.pscvietnam.com/", ResponseNamespace="http://www.pscvietnam.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] QuickHelper_GetFileContent(string publicKey, string token, string docFileNameWithExtension) {
            object[] results = this.Invoke("QuickHelper_GetFileContent", new object[] {
                        publicKey,
                        token,
                        docFileNameWithExtension});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void QuickHelper_GetFileContentAsync(string publicKey, string token, string docFileNameWithExtension) {
            this.QuickHelper_GetFileContentAsync(publicKey, token, docFileNameWithExtension, null);
        }
        
        /// <remarks/>
        public void QuickHelper_GetFileContentAsync(string publicKey, string token, string docFileNameWithExtension, object userState) {
            if ((this.QuickHelper_GetFileContentOperationCompleted == null)) {
                this.QuickHelper_GetFileContentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQuickHelper_GetFileContentOperationCompleted);
            }
            this.InvokeAsync("QuickHelper_GetFileContent", new object[] {
                        publicKey,
                        token,
                        docFileNameWithExtension}, this.QuickHelper_GetFileContentOperationCompleted, userState);
        }
        
        private void OnQuickHelper_GetFileContentOperationCompleted(object arg) {
            if ((this.QuickHelper_GetFileContentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QuickHelper_GetFileContentCompleted(this, new QuickHelper_GetFileContentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.pscvietnam.com/QuickHelper_GetFileContent_String", RequestNamespace="http://www.pscvietnam.com/", ResponseNamespace="http://www.pscvietnam.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string QuickHelper_GetFileContent_String(string publicKey, string token, string docFileNameWithExtension) {
            object[] results = this.Invoke("QuickHelper_GetFileContent_String", new object[] {
                        publicKey,
                        token,
                        docFileNameWithExtension});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void QuickHelper_GetFileContent_StringAsync(string publicKey, string token, string docFileNameWithExtension) {
            this.QuickHelper_GetFileContent_StringAsync(publicKey, token, docFileNameWithExtension, null);
        }
        
        /// <remarks/>
        public void QuickHelper_GetFileContent_StringAsync(string publicKey, string token, string docFileNameWithExtension, object userState) {
            if ((this.QuickHelper_GetFileContent_StringOperationCompleted == null)) {
                this.QuickHelper_GetFileContent_StringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQuickHelper_GetFileContent_StringOperationCompleted);
            }
            this.InvokeAsync("QuickHelper_GetFileContent_String", new object[] {
                        publicKey,
                        token,
                        docFileNameWithExtension}, this.QuickHelper_GetFileContent_StringOperationCompleted, userState);
        }
        
        private void OnQuickHelper_GetFileContent_StringOperationCompleted(object arg) {
            if ((this.QuickHelper_GetFileContent_StringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QuickHelper_GetFileContent_StringCompleted(this, new QuickHelper_GetFileContent_StringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.pscvietnam.com/QuickHelper_MakeFileIndex", RequestNamespace="http://www.pscvietnam.com/", ResponseNamespace="http://www.pscvietnam.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void QuickHelper_MakeFileIndex(string publicKey, string token, string docFileNameWithExtension) {
            this.Invoke("QuickHelper_MakeFileIndex", new object[] {
                        publicKey,
                        token,
                        docFileNameWithExtension});
        }
        
        /// <remarks/>
        public void QuickHelper_MakeFileIndexAsync(string publicKey, string token, string docFileNameWithExtension) {
            this.QuickHelper_MakeFileIndexAsync(publicKey, token, docFileNameWithExtension, null);
        }
        
        /// <remarks/>
        public void QuickHelper_MakeFileIndexAsync(string publicKey, string token, string docFileNameWithExtension, object userState) {
            if ((this.QuickHelper_MakeFileIndexOperationCompleted == null)) {
                this.QuickHelper_MakeFileIndexOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQuickHelper_MakeFileIndexOperationCompleted);
            }
            this.InvokeAsync("QuickHelper_MakeFileIndex", new object[] {
                        publicKey,
                        token,
                        docFileNameWithExtension}, this.QuickHelper_MakeFileIndexOperationCompleted, userState);
        }
        
        private void OnQuickHelper_MakeFileIndexOperationCompleted(object arg) {
            if ((this.QuickHelper_MakeFileIndexCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QuickHelper_MakeFileIndexCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.pscvietnam.com/QuickHelper_DeleteIndex_ByDocFileName", RequestNamespace="http://www.pscvietnam.com/", ResponseNamespace="http://www.pscvietnam.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void QuickHelper_DeleteIndex_ByDocFileName(string publicKey, string token, string docFileNameWithExtension) {
            this.Invoke("QuickHelper_DeleteIndex_ByDocFileName", new object[] {
                        publicKey,
                        token,
                        docFileNameWithExtension});
        }
        
        /// <remarks/>
        public void QuickHelper_DeleteIndex_ByDocFileNameAsync(string publicKey, string token, string docFileNameWithExtension) {
            this.QuickHelper_DeleteIndex_ByDocFileNameAsync(publicKey, token, docFileNameWithExtension, null);
        }
        
        /// <remarks/>
        public void QuickHelper_DeleteIndex_ByDocFileNameAsync(string publicKey, string token, string docFileNameWithExtension, object userState) {
            if ((this.QuickHelper_DeleteIndex_ByDocFileNameOperationCompleted == null)) {
                this.QuickHelper_DeleteIndex_ByDocFileNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQuickHelper_DeleteIndex_ByDocFileNameOperationCompleted);
            }
            this.InvokeAsync("QuickHelper_DeleteIndex_ByDocFileName", new object[] {
                        publicKey,
                        token,
                        docFileNameWithExtension}, this.QuickHelper_DeleteIndex_ByDocFileNameOperationCompleted, userState);
        }
        
        private void OnQuickHelper_DeleteIndex_ByDocFileNameOperationCompleted(object arg) {
            if ((this.QuickHelper_DeleteIndex_ByDocFileNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QuickHelper_DeleteIndex_ByDocFileNameCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.pscvietnam.com/QuickHelper_DeleteIndex_ByDocId", RequestNamespace="http://www.pscvietnam.com/", ResponseNamespace="http://www.pscvietnam.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void QuickHelper_DeleteIndex_ByDocId(string publicKey, string token, string docId) {
            this.Invoke("QuickHelper_DeleteIndex_ByDocId", new object[] {
                        publicKey,
                        token,
                        docId});
        }
        
        /// <remarks/>
        public void QuickHelper_DeleteIndex_ByDocIdAsync(string publicKey, string token, string docId) {
            this.QuickHelper_DeleteIndex_ByDocIdAsync(publicKey, token, docId, null);
        }
        
        /// <remarks/>
        public void QuickHelper_DeleteIndex_ByDocIdAsync(string publicKey, string token, string docId, object userState) {
            if ((this.QuickHelper_DeleteIndex_ByDocIdOperationCompleted == null)) {
                this.QuickHelper_DeleteIndex_ByDocIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQuickHelper_DeleteIndex_ByDocIdOperationCompleted);
            }
            this.InvokeAsync("QuickHelper_DeleteIndex_ByDocId", new object[] {
                        publicKey,
                        token,
                        docId}, this.QuickHelper_DeleteIndex_ByDocIdOperationCompleted, userState);
        }
        
        private void OnQuickHelper_DeleteIndex_ByDocIdOperationCompleted(object arg) {
            if ((this.QuickHelper_DeleteIndex_ByDocIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QuickHelper_DeleteIndex_ByDocIdCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.pscvietnam.com/QuickHelper_SearchContent", RequestNamespace="http://www.pscvietnam.com/", ResponseNamespace="http://www.pscvietnam.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public IndexPackage[] QuickHelper_SearchContent(string publicKey, string token, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] binaryContent, bool fileContentInResult) {
            object[] results = this.Invoke("QuickHelper_SearchContent", new object[] {
                        publicKey,
                        token,
                        binaryContent,
                        fileContentInResult});
            return ((IndexPackage[])(results[0]));
        }
        
        /// <remarks/>
        public void QuickHelper_SearchContentAsync(string publicKey, string token, byte[] binaryContent, bool fileContentInResult) {
            this.QuickHelper_SearchContentAsync(publicKey, token, binaryContent, fileContentInResult, null);
        }
        
        /// <remarks/>
        public void QuickHelper_SearchContentAsync(string publicKey, string token, byte[] binaryContent, bool fileContentInResult, object userState) {
            if ((this.QuickHelper_SearchContentOperationCompleted == null)) {
                this.QuickHelper_SearchContentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQuickHelper_SearchContentOperationCompleted);
            }
            this.InvokeAsync("QuickHelper_SearchContent", new object[] {
                        publicKey,
                        token,
                        binaryContent,
                        fileContentInResult}, this.QuickHelper_SearchContentOperationCompleted, userState);
        }
        
        private void OnQuickHelper_SearchContentOperationCompleted(object arg) {
            if ((this.QuickHelper_SearchContentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QuickHelper_SearchContentCompleted(this, new QuickHelper_SearchContentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.pscvietnam.com/QuickHelper_SearchContent_String", RequestNamespace="http://www.pscvietnam.com/", ResponseNamespace="http://www.pscvietnam.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public IndexPackage[] QuickHelper_SearchContent_String(string publicKey, string token, string content, string maPhanHe, bool fileContentInResult) {
            object[] results = this.Invoke("QuickHelper_SearchContent_String", new object[] {
                        publicKey,
                        token,
                        content,
                        maPhanHe,
                        fileContentInResult});
            return ((IndexPackage[])(results[0]));
        }
        
        /// <remarks/>
        public void QuickHelper_SearchContent_StringAsync(string publicKey, string token, string content, string maPhanHe, bool fileContentInResult) {
            this.QuickHelper_SearchContent_StringAsync(publicKey, token, content, maPhanHe, fileContentInResult, null);
        }
        
        /// <remarks/>
        public void QuickHelper_SearchContent_StringAsync(string publicKey, string token, string content, string maPhanHe, bool fileContentInResult, object userState) {
            if ((this.QuickHelper_SearchContent_StringOperationCompleted == null)) {
                this.QuickHelper_SearchContent_StringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQuickHelper_SearchContent_StringOperationCompleted);
            }
            this.InvokeAsync("QuickHelper_SearchContent_String", new object[] {
                        publicKey,
                        token,
                        content,
                        maPhanHe,
                        fileContentInResult}, this.QuickHelper_SearchContent_StringOperationCompleted, userState);
        }
        
        private void OnQuickHelper_SearchContent_StringOperationCompleted(object arg) {
            if ((this.QuickHelper_SearchContent_StringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QuickHelper_SearchContent_StringCompleted(this, new QuickHelper_SearchContent_StringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.pscvietnam.com/QuickHelper_DownloadSourceFile_ByFileName", RequestNamespace="http://www.pscvietnam.com/", ResponseNamespace="http://www.pscvietnam.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] QuickHelper_DownloadSourceFile_ByFileName(string publicKey, string token, string fileNameWithExtension, string maPhanHe) {
            object[] results = this.Invoke("QuickHelper_DownloadSourceFile_ByFileName", new object[] {
                        publicKey,
                        token,
                        fileNameWithExtension,
                        maPhanHe});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void QuickHelper_DownloadSourceFile_ByFileNameAsync(string publicKey, string token, string fileNameWithExtension, string maPhanHe) {
            this.QuickHelper_DownloadSourceFile_ByFileNameAsync(publicKey, token, fileNameWithExtension, maPhanHe, null);
        }
        
        /// <remarks/>
        public void QuickHelper_DownloadSourceFile_ByFileNameAsync(string publicKey, string token, string fileNameWithExtension, string maPhanHe, object userState) {
            if ((this.QuickHelper_DownloadSourceFile_ByFileNameOperationCompleted == null)) {
                this.QuickHelper_DownloadSourceFile_ByFileNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQuickHelper_DownloadSourceFile_ByFileNameOperationCompleted);
            }
            this.InvokeAsync("QuickHelper_DownloadSourceFile_ByFileName", new object[] {
                        publicKey,
                        token,
                        fileNameWithExtension,
                        maPhanHe}, this.QuickHelper_DownloadSourceFile_ByFileNameOperationCompleted, userState);
        }
        
        private void OnQuickHelper_DownloadSourceFile_ByFileNameOperationCompleted(object arg) {
            if ((this.QuickHelper_DownloadSourceFile_ByFileNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QuickHelper_DownloadSourceFile_ByFileNameCompleted(this, new QuickHelper_DownloadSourceFile_ByFileNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.pscvietnam.com/QuickHelper_DownloadConvertedFile_ByFileName", RequestNamespace="http://www.pscvietnam.com/", ResponseNamespace="http://www.pscvietnam.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] QuickHelper_DownloadConvertedFile_ByFileName(string publicKey, string token, string fileNameWithExtension) {
            object[] results = this.Invoke("QuickHelper_DownloadConvertedFile_ByFileName", new object[] {
                        publicKey,
                        token,
                        fileNameWithExtension});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void QuickHelper_DownloadConvertedFile_ByFileNameAsync(string publicKey, string token, string fileNameWithExtension) {
            this.QuickHelper_DownloadConvertedFile_ByFileNameAsync(publicKey, token, fileNameWithExtension, null);
        }
        
        /// <remarks/>
        public void QuickHelper_DownloadConvertedFile_ByFileNameAsync(string publicKey, string token, string fileNameWithExtension, object userState) {
            if ((this.QuickHelper_DownloadConvertedFile_ByFileNameOperationCompleted == null)) {
                this.QuickHelper_DownloadConvertedFile_ByFileNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQuickHelper_DownloadConvertedFile_ByFileNameOperationCompleted);
            }
            this.InvokeAsync("QuickHelper_DownloadConvertedFile_ByFileName", new object[] {
                        publicKey,
                        token,
                        fileNameWithExtension}, this.QuickHelper_DownloadConvertedFile_ByFileNameOperationCompleted, userState);
        }
        
        private void OnQuickHelper_DownloadConvertedFile_ByFileNameOperationCompleted(object arg) {
            if ((this.QuickHelper_DownloadConvertedFile_ByFileNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QuickHelper_DownloadConvertedFile_ByFileNameCompleted(this, new QuickHelper_DownloadConvertedFile_ByFileNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.pscvietnam.com/QuickHelper_UploadPdfFile", RequestNamespace="http://www.pscvietnam.com/", ResponseNamespace="http://www.pscvietnam.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void QuickHelper_UploadPdfFile(string publicKey, string token, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] f, string destFileNameWithExtension, string key) {
            this.Invoke("QuickHelper_UploadPdfFile", new object[] {
                        publicKey,
                        token,
                        f,
                        destFileNameWithExtension,
                        key});
        }
        
        /// <remarks/>
        public void QuickHelper_UploadPdfFileAsync(string publicKey, string token, byte[] f, string destFileNameWithExtension, string key) {
            this.QuickHelper_UploadPdfFileAsync(publicKey, token, f, destFileNameWithExtension, key, null);
        }
        
        /// <remarks/>
        public void QuickHelper_UploadPdfFileAsync(string publicKey, string token, byte[] f, string destFileNameWithExtension, string key, object userState) {
            if ((this.QuickHelper_UploadPdfFileOperationCompleted == null)) {
                this.QuickHelper_UploadPdfFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQuickHelper_UploadPdfFileOperationCompleted);
            }
            this.InvokeAsync("QuickHelper_UploadPdfFile", new object[] {
                        publicKey,
                        token,
                        f,
                        destFileNameWithExtension,
                        key}, this.QuickHelper_UploadPdfFileOperationCompleted, userState);
        }
        
        private void OnQuickHelper_UploadPdfFileOperationCompleted(object arg) {
            if ((this.QuickHelper_UploadPdfFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QuickHelper_UploadPdfFileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.pscvietnam.com/QuickHelper_UploadFileLargeSize", RequestNamespace="http://www.pscvietnam.com/", ResponseNamespace="http://www.pscvietnam.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void QuickHelper_UploadFileLargeSize(string publicKey, string token, string destFileNameWithExtension, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] buffer, long offset, long fileSize, string maPhanHe) {
            this.Invoke("QuickHelper_UploadFileLargeSize", new object[] {
                        publicKey,
                        token,
                        destFileNameWithExtension,
                        buffer,
                        offset,
                        fileSize,
                        maPhanHe});
        }
        
        /// <remarks/>
        public void QuickHelper_UploadFileLargeSizeAsync(string publicKey, string token, string destFileNameWithExtension, byte[] buffer, long offset, long fileSize, string maPhanHe) {
            this.QuickHelper_UploadFileLargeSizeAsync(publicKey, token, destFileNameWithExtension, buffer, offset, fileSize, maPhanHe, null);
        }
        
        /// <remarks/>
        public void QuickHelper_UploadFileLargeSizeAsync(string publicKey, string token, string destFileNameWithExtension, byte[] buffer, long offset, long fileSize, string maPhanHe, object userState) {
            if ((this.QuickHelper_UploadFileLargeSizeOperationCompleted == null)) {
                this.QuickHelper_UploadFileLargeSizeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQuickHelper_UploadFileLargeSizeOperationCompleted);
            }
            this.InvokeAsync("QuickHelper_UploadFileLargeSize", new object[] {
                        publicKey,
                        token,
                        destFileNameWithExtension,
                        buffer,
                        offset,
                        fileSize,
                        maPhanHe}, this.QuickHelper_UploadFileLargeSizeOperationCompleted, userState);
        }
        
        private void OnQuickHelper_UploadFileLargeSizeOperationCompleted(object arg) {
            if ((this.QuickHelper_UploadFileLargeSizeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QuickHelper_UploadFileLargeSizeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.pscvietnam.com/UploadPdfFile", RequestNamespace="http://www.pscvietnam.com/", ResponseNamespace="http://www.pscvietnam.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UploadPdfFile(string publicKey, string token, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] f, string destFileName, string destDirPath, string key) {
            this.Invoke("UploadPdfFile", new object[] {
                        publicKey,
                        token,
                        f,
                        destFileName,
                        destDirPath,
                        key});
        }
        
        /// <remarks/>
        public void UploadPdfFileAsync(string publicKey, string token, byte[] f, string destFileName, string destDirPath, string key) {
            this.UploadPdfFileAsync(publicKey, token, f, destFileName, destDirPath, key, null);
        }
        
        /// <remarks/>
        public void UploadPdfFileAsync(string publicKey, string token, byte[] f, string destFileName, string destDirPath, string key, object userState) {
            if ((this.UploadPdfFileOperationCompleted == null)) {
                this.UploadPdfFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadPdfFileOperationCompleted);
            }
            this.InvokeAsync("UploadPdfFile", new object[] {
                        publicKey,
                        token,
                        f,
                        destFileName,
                        destDirPath,
                        key}, this.UploadPdfFileOperationCompleted, userState);
        }
        
        private void OnUploadPdfFileOperationCompleted(object arg) {
            if ((this.UploadPdfFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadPdfFileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.pscvietnam.com/UploadFileLargeSize", RequestNamespace="http://www.pscvietnam.com/", ResponseNamespace="http://www.pscvietnam.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UploadFileLargeSize(string publicKey, string token, string destFilePath, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] buffer, long offset) {
            this.Invoke("UploadFileLargeSize", new object[] {
                        publicKey,
                        token,
                        destFilePath,
                        buffer,
                        offset});
        }
        
        /// <remarks/>
        public void UploadFileLargeSizeAsync(string publicKey, string token, string destFilePath, byte[] buffer, long offset) {
            this.UploadFileLargeSizeAsync(publicKey, token, destFilePath, buffer, offset, null);
        }
        
        /// <remarks/>
        public void UploadFileLargeSizeAsync(string publicKey, string token, string destFilePath, byte[] buffer, long offset, object userState) {
            if ((this.UploadFileLargeSizeOperationCompleted == null)) {
                this.UploadFileLargeSizeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadFileLargeSizeOperationCompleted);
            }
            this.InvokeAsync("UploadFileLargeSize", new object[] {
                        publicKey,
                        token,
                        destFilePath,
                        buffer,
                        offset}, this.UploadFileLargeSizeOperationCompleted, userState);
        }
        
        private void OnUploadFileLargeSizeOperationCompleted(object arg) {
            if ((this.UploadFileLargeSizeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadFileLargeSizeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.pscvietnam.com/DownloadFile", RequestNamespace="http://www.pscvietnam.com/", ResponseNamespace="http://www.pscvietnam.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] DownloadFile(string publicKey, string token, string filePath, string pdfPassword) {
            object[] results = this.Invoke("DownloadFile", new object[] {
                        publicKey,
                        token,
                        filePath,
                        pdfPassword});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void DownloadFileAsync(string publicKey, string token, string filePath, string pdfPassword) {
            this.DownloadFileAsync(publicKey, token, filePath, pdfPassword, null);
        }
        
        /// <remarks/>
        public void DownloadFileAsync(string publicKey, string token, string filePath, string pdfPassword, object userState) {
            if ((this.DownloadFileOperationCompleted == null)) {
                this.DownloadFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadFileOperationCompleted);
            }
            this.InvokeAsync("DownloadFile", new object[] {
                        publicKey,
                        token,
                        filePath,
                        pdfPassword}, this.DownloadFileOperationCompleted, userState);
        }
        
        private void OnDownloadFileOperationCompleted(object arg) {
            if ((this.DownloadFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadFileCompleted(this, new DownloadFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.pscvietnam.com/")]
    public partial class IndexPackage {
        
        private string docIdField;
        
        private string docFileNameField;
        
        private string contentField;
        
        private string updateDateField;
        
        /// <remarks/>
        public string DocId {
            get {
                return this.docIdField;
            }
            set {
                this.docIdField = value;
            }
        }
        
        /// <remarks/>
        public string DocFileName {
            get {
                return this.docFileNameField;
            }
            set {
                this.docFileNameField = value;
            }
        }
        
        /// <remarks/>
        public string Content {
            get {
                return this.contentField;
            }
            set {
                this.contentField = value;
            }
        }
        
        /// <remarks/>
        public string UpdateDate {
            get {
                return this.updateDateField;
            }
            set {
                this.updateDateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void SplitFileCompletedEventHandler(object sender, SplitFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SplitFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SplitFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void QuickHelper_DownloadSourceFileLarge_ByFileNameCompletedEventHandler(object sender, QuickHelper_DownloadSourceFileLarge_ByFileNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QuickHelper_DownloadSourceFileLarge_ByFileNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QuickHelper_DownloadSourceFileLarge_ByFileNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void SearchContent_StringCompletedEventHandler(object sender, SearchContent_StringCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchContent_StringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchContent_StringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public IndexPackage[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((IndexPackage[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void IO_DeleteFileCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void IO_TryDeleteFileCompletedEventHandler(object sender, IO_TryDeleteFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IO_TryDeleteFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IO_TryDeleteFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void IO_DeleteDirCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void IO_TryDeleteDirCompletedEventHandler(object sender, IO_TryDeleteDirCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IO_TryDeleteDirCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IO_TryDeleteDirCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void IO_CreateDirectoryCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void IO_TryCreateDirectoryCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void Index_GetPdfContentCompletedEventHandler(object sender, Index_GetPdfContentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Index_GetPdfContentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Index_GetPdfContentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void Index_GetFileContentCompletedEventHandler(object sender, Index_GetFileContentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Index_GetFileContentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Index_GetFileContentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void Index_DeleteDocIndexing_ByDocIdCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void IO_ExistsFileCompletedEventHandler(object sender, IO_ExistsFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IO_ExistsFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IO_ExistsFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void IO_ExistsDirCompletedEventHandler(object sender, IO_ExistsDirCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IO_ExistsDirCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IO_ExistsDirCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void IO_MoveFileCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void IO_TryMoveFileCompletedEventHandler(object sender, IO_TryMoveFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IO_TryMoveFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IO_TryMoveFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void IO_RenameFileCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void IO_TryRenameFileCompletedEventHandler(object sender, IO_TryRenameFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IO_TryRenameFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IO_TryRenameFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void IO_RenameDirCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void IO_TryRenameDirCompletedEventHandler(object sender, IO_TryRenameDirCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IO_TryRenameDirCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IO_TryRenameDirCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void IO_MoveDirCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void IO_TryMoveDirCompletedEventHandler(object sender, IO_TryMoveDirCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IO_TryMoveDirCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IO_TryMoveDirCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void QuickHelper_DeleteHotFolderLogCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void QuickHelper_DeleteDocument_ByDocFileNameWithoutExtensionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void QuickHelper_CheckExistSourceFile_ByFileNameCompletedEventHandler(object sender, QuickHelper_CheckExistSourceFile_ByFileNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QuickHelper_CheckExistSourceFile_ByFileNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QuickHelper_CheckExistSourceFile_ByFileNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void QuickHelper_CheckExistConvertedFile_ByFileNameCompletedEventHandler(object sender, QuickHelper_CheckExistConvertedFile_ByFileNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QuickHelper_CheckExistConvertedFile_ByFileNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QuickHelper_CheckExistConvertedFile_ByFileNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void QuickHelper_ResetIndexCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void QuickHelper_GetFileContentCompletedEventHandler(object sender, QuickHelper_GetFileContentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QuickHelper_GetFileContentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QuickHelper_GetFileContentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void QuickHelper_GetFileContent_StringCompletedEventHandler(object sender, QuickHelper_GetFileContent_StringCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QuickHelper_GetFileContent_StringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QuickHelper_GetFileContent_StringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void QuickHelper_MakeFileIndexCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void QuickHelper_DeleteIndex_ByDocFileNameCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void QuickHelper_DeleteIndex_ByDocIdCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void QuickHelper_SearchContentCompletedEventHandler(object sender, QuickHelper_SearchContentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QuickHelper_SearchContentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QuickHelper_SearchContentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public IndexPackage[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((IndexPackage[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void QuickHelper_SearchContent_StringCompletedEventHandler(object sender, QuickHelper_SearchContent_StringCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QuickHelper_SearchContent_StringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QuickHelper_SearchContent_StringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public IndexPackage[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((IndexPackage[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void QuickHelper_DownloadSourceFile_ByFileNameCompletedEventHandler(object sender, QuickHelper_DownloadSourceFile_ByFileNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QuickHelper_DownloadSourceFile_ByFileNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QuickHelper_DownloadSourceFile_ByFileNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void QuickHelper_DownloadConvertedFile_ByFileNameCompletedEventHandler(object sender, QuickHelper_DownloadConvertedFile_ByFileNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QuickHelper_DownloadConvertedFile_ByFileNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QuickHelper_DownloadConvertedFile_ByFileNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void QuickHelper_UploadPdfFileCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void QuickHelper_UploadFileLargeSizeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void UploadPdfFileCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void UploadFileLargeSizeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void DownloadFileCompletedEventHandler(object sender, DownloadFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownloadFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591
//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
//	  Code duoc tao boi DESKTOP-J5VELTF\DELL luc 10:47:31 ngay 24/12/2021
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Runtime.Serialization;
using System.Xml.Serialization;


namespace PSC_ERP_Business.Main.Model
{
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="PSC_ERPModel", Name="TaskDependency")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class TaskDependency : PSC_ERP_Core.BaseEntityObject//EntityObject
    {
    	public TaskDependency()
    	{
    
    	}
        #region Factory Method
    
        /// <summary>
        /// Create a new TaskDependency object.
        /// </summary>
        /// <param name="id">Initial value of the ID property.</param>
        public static TaskDependency CreateTaskDependency(long id)
        {
            TaskDependency taskDependency = new TaskDependency();
            taskDependency.ID = id;
            return taskDependency;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public long ID
        {
            get
            {
                return _iD;
            }
            set
            {
                if (_iD != value)
                {
        			long oldValue =  _iD;
        			bool stopChanging = false;
                    On_ID_Changing(oldValue, ref value, ref stopChanging);
                    ReportPropertyChanging("ID");
        			if(!stopChanging)
        			{
        				_iD = StructuralObject.SetValidValue(value);
        				ReportPropertyChanged("ID");
        				On_ID_Changed(oldValue, _iD);//\\
        			}
                }
            }
        }
    	public static String ID_PropertyName { get { return "ID"; } }
        private long _iD;
        partial void On_ID_Changing(long currentValue, ref long newValue, ref bool stopChanging);
        partial void On_ID_Changed(long oldValue, long currentValue);
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<int> ProjectID
        {
            get
            {
                return _projectID;
            }
            set
            {
    			Nullable<int> oldValue =  _projectID;
    			bool stopChanging = false;
                On_ProjectID_Changing(oldValue, ref value, ref stopChanging);
                ReportPropertyChanging("ProjectID");
    			if(!stopChanging)
    			{
    				_projectID = StructuralObject.SetValidValue(value);
    				ReportPropertyChanged("ProjectID");
    				On_ProjectID_Changed(oldValue, _projectID);//\\
    			}
            }
        }
    	public static String ProjectID_PropertyName { get { return "ProjectID"; } }
        private Nullable<int> _projectID;
        partial void On_ProjectID_Changing(Nullable<int> currentValue, ref Nullable<int> newValue, ref bool stopChanging);
        partial void On_ProjectID_Changed(Nullable<int> oldValue, Nullable<int> currentValue);
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<long> Parent
        {
            get
            {
                return _parent;
            }
            set
            {
    			Nullable<long> oldValue =  _parent;
    			bool stopChanging = false;
                On_Parent_Changing(oldValue, ref value, ref stopChanging);
                ReportPropertyChanging("Parent");
    			if(!stopChanging)
    			{
    				_parent = StructuralObject.SetValidValue(value);
    				ReportPropertyChanged("Parent");
    				On_Parent_Changed(oldValue, _parent);//\\
    			}
            }
        }
    	public static String Parent_PropertyName { get { return "Parent"; } }
        private Nullable<long> _parent;
        partial void On_Parent_Changing(Nullable<long> currentValue, ref Nullable<long> newValue, ref bool stopChanging);
        partial void On_Parent_Changed(Nullable<long> oldValue, Nullable<long> currentValue);
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<long> Dependent
        {
            get
            {
                return _dependent;
            }
            set
            {
    			Nullable<long> oldValue =  _dependent;
    			bool stopChanging = false;
                On_Dependent_Changing(oldValue, ref value, ref stopChanging);
                ReportPropertyChanging("Dependent");
    			if(!stopChanging)
    			{
    				_dependent = StructuralObject.SetValidValue(value);
    				ReportPropertyChanged("Dependent");
    				On_Dependent_Changed(oldValue, _dependent);//\\
    			}
            }
        }
    	public static String Dependent_PropertyName { get { return "Dependent"; } }
        private Nullable<long> _dependent;
        partial void On_Dependent_Changing(Nullable<long> currentValue, ref Nullable<long> newValue, ref bool stopChanging);
        partial void On_Dependent_Changed(Nullable<long> oldValue, Nullable<long> currentValue);
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<byte> Type
        {
            get
            {
                return _type;
            }
            set
            {
    			Nullable<byte> oldValue =  _type;
    			bool stopChanging = false;
                On_Type_Changing(oldValue, ref value, ref stopChanging);
                ReportPropertyChanging("Type");
    			if(!stopChanging)
    			{
    				_type = StructuralObject.SetValidValue(value);
    				ReportPropertyChanged("Type");
    				On_Type_Changed(oldValue, _type);//\\
    			}
            }
        }
    	public static String Type_PropertyName { get { return "Type"; } }
        private Nullable<byte> _type;
        partial void On_Type_Changing(Nullable<byte> currentValue, ref Nullable<byte> newValue, ref bool stopChanging);
        partial void On_Type_Changed(Nullable<byte> oldValue, Nullable<byte> currentValue);

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("PSC_ERPModel", "FK_TaskDependencies_Tasks", "Task")]
        public Task Task
        {//test
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Task>("PSC_ERPModel.FK_TaskDependencies_Tasks", "Task").Value;
            }
            set
            {
    			bool stopChanging = false;
    			On_Task_Changing(ref value, ref stopChanging);//\\//
    			if(!stopChanging)
    			{
    				((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Task>("PSC_ERPModel.FK_TaskDependencies_Tasks", "Task").Value = value;
    				On_Task_Changed(this.Task);//\\//
    			}
    	    }
        }
    	public static String Task_ReferencePropertyName { get { return "Task"; } }
    	partial void On_Task_Changing(ref Task newValue, ref bool stopChanging);
    	partial void On_Task_Changed(Task currentValue);
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Task> TaskReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Task>("PSC_ERPModel.FK_TaskDependencies_Tasks", "Task");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Task>("PSC_ERPModel.FK_TaskDependencies_Tasks", "Task", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("PSC_ERPModel", "FK_TaskDependencies_Tasks1", "Task")]
        public Task Task1
        {//test
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Task>("PSC_ERPModel.FK_TaskDependencies_Tasks1", "Task").Value;
            }
            set
            {
    			bool stopChanging = false;
    			On_Task1_Changing(ref value, ref stopChanging);//\\//
    			if(!stopChanging)
    			{
    				((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Task>("PSC_ERPModel.FK_TaskDependencies_Tasks1", "Task").Value = value;
    				On_Task1_Changed(this.Task1);//\\//
    			}
    	    }
        }
    	public static String Task1_ReferencePropertyName { get { return "Task1"; } }
    	partial void On_Task1_Changing(ref Task newValue, ref bool stopChanging);
    	partial void On_Task1_Changed(Task currentValue);
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Task> Task1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Task>("PSC_ERPModel.FK_TaskDependencies_Tasks1", "Task");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Task>("PSC_ERPModel.FK_TaskDependencies_Tasks1", "Task", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("PSC_ERPModel", "FK_TaskDependencies_Project", "Project")]
        public Project Project
        {//test
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Project>("PSC_ERPModel.FK_TaskDependencies_Project", "Project").Value;
            }
            set
            {
    			bool stopChanging = false;
    			On_Project_Changing(ref value, ref stopChanging);//\\//
    			if(!stopChanging)
    			{
    				((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Project>("PSC_ERPModel.FK_TaskDependencies_Project", "Project").Value = value;
    				On_Project_Changed(this.Project);//\\//
    			}
    	    }
        }
    	public static String Project_ReferencePropertyName { get { return "Project"; } }
    	partial void On_Project_Changing(ref Project newValue, ref bool stopChanging);
    	partial void On_Project_Changed(Project currentValue);
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Project> ProjectReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Project>("PSC_ERPModel.FK_TaskDependencies_Project", "Project");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Project>("PSC_ERPModel.FK_TaskDependencies_Project", "Project", value);
                }
            }
        }

        #endregion

    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
//	  Code duoc tao boi DESKTOP-J5VELTF\DELL luc 10:47:31 ngay 24/12/2021
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Runtime.Serialization;
using System.Xml.Serialization;


namespace PSC_ERP_Business.Main.Model
{
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="PSC_ERPModel", Name="Task")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Task : PSC_ERP_Core.BaseEntityObject//EntityObject
    {
    	public Task()
    	{
    
    	}
        #region Factory Method
    
        /// <summary>
        /// Create a new Task object.
        /// </summary>
        /// <param name="id">Initial value of the ID property.</param>
        public static Task CreateTask(long id)
        {
            Task task = new Task();
            task.ID = id;
            return task;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public long ID
        {
            get
            {
                return _iD;
            }
            set
            {
                if (_iD != value)
                {
        			long oldValue =  _iD;
        			bool stopChanging = false;
                    On_ID_Changing(oldValue, ref value, ref stopChanging);
                    ReportPropertyChanging("ID");
        			if(!stopChanging)
        			{
        				_iD = StructuralObject.SetValidValue(value);
        				ReportPropertyChanged("ID");
        				On_ID_Changed(oldValue, _iD);//\\
        			}
                }
            }
        }
    	public static String ID_PropertyName { get { return "ID"; } }
        private long _iD;
        partial void On_ID_Changing(long currentValue, ref long newValue, ref bool stopChanging);
        partial void On_ID_Changed(long oldValue, long currentValue);
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<int> ProjectID
        {
            get
            {
                return _projectID;
            }
            set
            {
    			Nullable<int> oldValue =  _projectID;
    			bool stopChanging = false;
                On_ProjectID_Changing(oldValue, ref value, ref stopChanging);
                ReportPropertyChanging("ProjectID");
    			if(!stopChanging)
    			{
    				_projectID = StructuralObject.SetValidValue(value);
    				ReportPropertyChanged("ProjectID");
    				On_ProjectID_Changed(oldValue, _projectID);//\\
    			}
            }
        }
    	public static String ProjectID_PropertyName { get { return "ProjectID"; } }
        private Nullable<int> _projectID;
        partial void On_ProjectID_Changing(Nullable<int> currentValue, ref Nullable<int> newValue, ref bool stopChanging);
        partial void On_ProjectID_Changed(Nullable<int> oldValue, Nullable<int> currentValue);
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<int> TaskJobIndex
        {
            get
            {
                return _taskJobIndex;
            }
            set
            {
    			Nullable<int> oldValue =  _taskJobIndex;
    			bool stopChanging = false;
                On_TaskJobIndex_Changing(oldValue, ref value, ref stopChanging);
                ReportPropertyChanging("TaskJobIndex");
    			if(!stopChanging)
    			{
    				_taskJobIndex = StructuralObject.SetValidValue(value);
    				ReportPropertyChanged("TaskJobIndex");
    				On_TaskJobIndex_Changed(oldValue, _taskJobIndex);//\\
    			}
            }
        }
    	public static String TaskJobIndex_PropertyName { get { return "TaskJobIndex"; } }
        private Nullable<int> _taskJobIndex;
        partial void On_TaskJobIndex_Changing(Nullable<int> currentValue, ref Nullable<int> newValue, ref bool stopChanging);
        partial void On_TaskJobIndex_Changed(Nullable<int> oldValue, Nullable<int> currentValue);
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<System.Guid> ResourceID
        {
            get
            {
                return _resourceID;
            }
            set
            {
    			Nullable<System.Guid> oldValue =  _resourceID;
    			bool stopChanging = false;
                On_ResourceID_Changing(oldValue, ref value, ref stopChanging);
                ReportPropertyChanging("ResourceID");
    			if(!stopChanging)
    			{
    				_resourceID = StructuralObject.SetValidValue(value);
    				ReportPropertyChanged("ResourceID");
    				On_ResourceID_Changed(oldValue, _resourceID);//\\
    			}
            }
        }
    	public static String ResourceID_PropertyName { get { return "ResourceID"; } }
        private Nullable<System.Guid> _resourceID;
        partial void On_ResourceID_Changing(Nullable<System.Guid> currentValue, ref Nullable<System.Guid> newValue, ref bool stopChanging);
        partial void On_ResourceID_Changed(Nullable<System.Guid> oldValue, Nullable<System.Guid> currentValue);
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public string Subject
        {
            get
            {
                return _subject;
            }
            set
            {
    			string oldValue =  _subject;
    			bool stopChanging = false;
                On_Subject_Changing(oldValue, ref value, ref stopChanging);
                ReportPropertyChanging("Subject");
    			if(!stopChanging)
    			{
    				_subject = StructuralObject.SetValidValue(value, true);
    				ReportPropertyChanged("Subject");
    				On_Subject_Changed(oldValue, _subject);//\\
    			}
            }
        }
    	public static String Subject_PropertyName { get { return "Subject"; } }
        private string _subject;
        partial void On_Subject_Changing(string currentValue, ref string newValue, ref bool stopChanging);
        partial void On_Subject_Changed(string oldValue, string currentValue);
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public string Decricption
        {
            get
            {
                return _decricption;
            }
            set
            {
    			string oldValue =  _decricption;
    			bool stopChanging = false;
                On_Decricption_Changing(oldValue, ref value, ref stopChanging);
                ReportPropertyChanging("Decricption");
    			if(!stopChanging)
    			{
    				_decricption = StructuralObject.SetValidValue(value, true);
    				ReportPropertyChanged("Decricption");
    				On_Decricption_Changed(oldValue, _decricption);//\\
    			}
            }
        }
    	public static String Decricption_PropertyName { get { return "Decricption"; } }
        private string _decricption;
        partial void On_Decricption_Changing(string currentValue, ref string newValue, ref bool stopChanging);
        partial void On_Decricption_Changed(string oldValue, string currentValue);
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<decimal> Cost
        {
            get
            {
                return _cost;
            }
            set
            {
    			Nullable<decimal> oldValue =  _cost;
    			bool stopChanging = false;
                On_Cost_Changing(oldValue, ref value, ref stopChanging);
                ReportPropertyChanging("Cost");
    			if(!stopChanging)
    			{
    				_cost = StructuralObject.SetValidValue(value);
    				ReportPropertyChanged("Cost");
    				On_Cost_Changed(oldValue, _cost);//\\
    			}
            }
        }
    	public static String Cost_PropertyName { get { return "Cost"; } }
        private Nullable<decimal> _cost;
        partial void On_Cost_Changing(Nullable<decimal> currentValue, ref Nullable<decimal> newValue, ref bool stopChanging);
        partial void On_Cost_Changed(Nullable<decimal> oldValue, Nullable<decimal> currentValue);
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<decimal> ActualCost
        {
            get
            {
                return _actualCost;
            }
            set
            {
    			Nullable<decimal> oldValue =  _actualCost;
    			bool stopChanging = false;
                On_ActualCost_Changing(oldValue, ref value, ref stopChanging);
                ReportPropertyChanging("ActualCost");
    			if(!stopChanging)
    			{
    				_actualCost = StructuralObject.SetValidValue(value);
    				ReportPropertyChanged("ActualCost");
    				On_ActualCost_Changed(oldValue, _actualCost);//\\
    			}
            }
        }
    	public static String ActualCost_PropertyName { get { return "ActualCost"; } }
        private Nullable<decimal> _actualCost;
        partial void On_ActualCost_Changing(Nullable<decimal> currentValue, ref Nullable<decimal> newValue, ref bool stopChanging);
        partial void On_ActualCost_Changed(Nullable<decimal> oldValue, Nullable<decimal> currentValue);
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<System.DateTime> StartTime
        {
            get
            {
                return _startTime;
            }
            set
            {
    			Nullable<System.DateTime> oldValue =  _startTime;
    			bool stopChanging = false;
                On_StartTime_Changing(oldValue, ref value, ref stopChanging);
                ReportPropertyChanging("StartTime");
    			if(!stopChanging)
    			{
    				_startTime = StructuralObject.SetValidValue(value);
    				ReportPropertyChanged("StartTime");
    				On_StartTime_Changed(oldValue, _startTime);//\\
    			}
            }
        }
    	public static String StartTime_PropertyName { get { return "StartTime"; } }
        private Nullable<System.DateTime> _startTime;
        partial void On_StartTime_Changing(Nullable<System.DateTime> currentValue, ref Nullable<System.DateTime> newValue, ref bool stopChanging);
        partial void On_StartTime_Changed(Nullable<System.DateTime> oldValue, Nullable<System.DateTime> currentValue);
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<System.DateTime> EndTime
        {
            get
            {
                return _endTime;
            }
            set
            {
    			Nullable<System.DateTime> oldValue =  _endTime;
    			bool stopChanging = false;
                On_EndTime_Changing(oldValue, ref value, ref stopChanging);
                ReportPropertyChanging("EndTime");
    			if(!stopChanging)
    			{
    				_endTime = StructuralObject.SetValidValue(value);
    				ReportPropertyChanged("EndTime");
    				On_EndTime_Changed(oldValue, _endTime);//\\
    			}
            }
        }
    	public static String EndTime_PropertyName { get { return "EndTime"; } }
        private Nullable<System.DateTime> _endTime;
        partial void On_EndTime_Changing(Nullable<System.DateTime> currentValue, ref Nullable<System.DateTime> newValue, ref bool stopChanging);
        partial void On_EndTime_Changed(Nullable<System.DateTime> oldValue, Nullable<System.DateTime> currentValue);
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<System.DateTime> ActualStartTime
        {
            get
            {
                return _actualStartTime;
            }
            set
            {
    			Nullable<System.DateTime> oldValue =  _actualStartTime;
    			bool stopChanging = false;
                On_ActualStartTime_Changing(oldValue, ref value, ref stopChanging);
                ReportPropertyChanging("ActualStartTime");
    			if(!stopChanging)
    			{
    				_actualStartTime = StructuralObject.SetValidValue(value);
    				ReportPropertyChanged("ActualStartTime");
    				On_ActualStartTime_Changed(oldValue, _actualStartTime);//\\
    			}
            }
        }
    	public static String ActualStartTime_PropertyName { get { return "ActualStartTime"; } }
        private Nullable<System.DateTime> _actualStartTime;
        partial void On_ActualStartTime_Changing(Nullable<System.DateTime> currentValue, ref Nullable<System.DateTime> newValue, ref bool stopChanging);
        partial void On_ActualStartTime_Changed(Nullable<System.DateTime> oldValue, Nullable<System.DateTime> currentValue);
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<System.DateTime> ActualEndTime
        {
            get
            {
                return _actualEndTime;
            }
            set
            {
    			Nullable<System.DateTime> oldValue =  _actualEndTime;
    			bool stopChanging = false;
                On_ActualEndTime_Changing(oldValue, ref value, ref stopChanging);
                ReportPropertyChanging("ActualEndTime");
    			if(!stopChanging)
    			{
    				_actualEndTime = StructuralObject.SetValidValue(value);
    				ReportPropertyChanged("ActualEndTime");
    				On_ActualEndTime_Changed(oldValue, _actualEndTime);//\\
    			}
            }
        }
    	public static String ActualEndTime_PropertyName { get { return "ActualEndTime"; } }
        private Nullable<System.DateTime> _actualEndTime;
        partial void On_ActualEndTime_Changing(Nullable<System.DateTime> currentValue, ref Nullable<System.DateTime> newValue, ref bool stopChanging);
        partial void On_ActualEndTime_Changed(Nullable<System.DateTime> oldValue, Nullable<System.DateTime> currentValue);
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<bool> AllDay
        {
            get
            {
                return _allDay;
            }
            set
            {
    			Nullable<bool> oldValue =  _allDay;
    			bool stopChanging = false;
                On_AllDay_Changing(oldValue, ref value, ref stopChanging);
                ReportPropertyChanging("AllDay");
    			if(!stopChanging)
    			{
    				_allDay = StructuralObject.SetValidValue(value);
    				ReportPropertyChanged("AllDay");
    				On_AllDay_Changed(oldValue, _allDay);//\\
    			}
            }
        }
    	public static String AllDay_PropertyName { get { return "AllDay"; } }
        private Nullable<bool> _allDay;
        partial void On_AllDay_Changing(Nullable<bool> currentValue, ref Nullable<bool> newValue, ref bool stopChanging);
        partial void On_AllDay_Changed(Nullable<bool> oldValue, Nullable<bool> currentValue);
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public string Location
        {
            get
            {
                return _location;
            }
            set
            {
    			string oldValue =  _location;
    			bool stopChanging = false;
                On_Location_Changing(oldValue, ref value, ref stopChanging);
                ReportPropertyChanging("Location");
    			if(!stopChanging)
    			{
    				_location = StructuralObject.SetValidValue(value, true);
    				ReportPropertyChanged("Location");
    				On_Location_Changed(oldValue, _location);//\\
    			}
            }
        }
    	public static String Location_PropertyName { get { return "Location"; } }
        private string _location;
        partial void On_Location_Changing(string currentValue, ref string newValue, ref bool stopChanging);
        partial void On_Location_Changed(string oldValue, string currentValue);
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<int> PercentComplete
        {
            get
            {
                return _percentComplete;
            }
            set
            {
    			Nullable<int> oldValue =  _percentComplete;
    			bool stopChanging = false;
                On_PercentComplete_Changing(oldValue, ref value, ref stopChanging);
                ReportPropertyChanging("PercentComplete");
    			if(!stopChanging)
    			{
    				_percentComplete = StructuralObject.SetValidValue(value);
    				ReportPropertyChanged("PercentComplete");
    				On_PercentComplete_Changed(oldValue, _percentComplete);//\\
    			}
            }
        }
    	public static String PercentComplete_PropertyName { get { return "PercentComplete"; } }
        private Nullable<int> _percentComplete;
        partial void On_PercentComplete_Changing(Nullable<int> currentValue, ref Nullable<int> newValue, ref bool stopChanging);
        partial void On_PercentComplete_Changed(Nullable<int> oldValue, Nullable<int> currentValue);
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public string RecurrenceInfo
        {
            get
            {
                return _recurrenceInfo;
            }
            set
            {
    			string oldValue =  _recurrenceInfo;
    			bool stopChanging = false;
                On_RecurrenceInfo_Changing(oldValue, ref value, ref stopChanging);
                ReportPropertyChanging("RecurrenceInfo");
    			if(!stopChanging)
    			{
    				_recurrenceInfo = StructuralObject.SetValidValue(value, true);
    				ReportPropertyChanged("RecurrenceInfo");
    				On_RecurrenceInfo_Changed(oldValue, _recurrenceInfo);//\\
    			}
            }
        }
    	public static String RecurrenceInfo_PropertyName { get { return "RecurrenceInfo"; } }
        private string _recurrenceInfo;
        partial void On_RecurrenceInfo_Changing(string currentValue, ref string newValue, ref bool stopChanging);
        partial void On_RecurrenceInfo_Changed(string oldValue, string currentValue);
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public string ReminderInfo
        {
            get
            {
                return _reminderInfo;
            }
            set
            {
    			string oldValue =  _reminderInfo;
    			bool stopChanging = false;
                On_ReminderInfo_Changing(oldValue, ref value, ref stopChanging);
                ReportPropertyChanging("ReminderInfo");
    			if(!stopChanging)
    			{
    				_reminderInfo = StructuralObject.SetValidValue(value, true);
    				ReportPropertyChanged("ReminderInfo");
    				On_ReminderInfo_Changed(oldValue, _reminderInfo);//\\
    			}
            }
        }
    	public static String ReminderInfo_PropertyName { get { return "ReminderInfo"; } }
        private string _reminderInfo;
        partial void On_ReminderInfo_Changing(string currentValue, ref string newValue, ref bool stopChanging);
        partial void On_ReminderInfo_Changed(string oldValue, string currentValue);
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<byte> EventType
        {
            get
            {
                return _eventType;
            }
            set
            {
    			Nullable<byte> oldValue =  _eventType;
    			bool stopChanging = false;
                On_EventType_Changing(oldValue, ref value, ref stopChanging);
                ReportPropertyChanging("EventType");
    			if(!stopChanging)
    			{
    				_eventType = StructuralObject.SetValidValue(value);
    				ReportPropertyChanged("EventType");
    				On_EventType_Changed(oldValue, _eventType);//\\
    			}
            }
        }
    	public static String EventType_PropertyName { get { return "EventType"; } }
        private Nullable<byte> _eventType;
        partial void On_EventType_Changing(Nullable<byte> currentValue, ref Nullable<byte> newValue, ref bool stopChanging);
        partial void On_EventType_Changed(Nullable<byte> oldValue, Nullable<byte> currentValue);

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("PSC_ERPModel", "FK_Task_Asset_Tasks", "Task_Asset")]
        public EntityCollection<Task_Asset> Task_Asset
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Task_Asset>("PSC_ERPModel.FK_Task_Asset_Tasks", "Task_Asset");
            }
            set
            {
                if ((value != null))
                {
    				bool stopChanging = false;
    				On_Task_Asset_Changing(ref value, ref stopChanging);//\\//
    				if(!stopChanging)
    				{
    					((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Task_Asset>("PSC_ERPModel.FK_Task_Asset_Tasks", "Task_Asset", value);
    					On_Task_Asset_Changed(this.Task_Asset);//\\//
    				}
    			}
            }
        }
    	public static String Task_Asset_EntityCollectionPropertyName { get { return "Task_Asset"; } }
    	partial void On_Task_Asset_Changing(ref EntityCollection<Task_Asset> newValue, ref bool stopChanging);
    	partial void On_Task_Asset_Changed(EntityCollection<Task_Asset> currentValue);
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("PSC_ERPModel", "FK_Task_ProjectEmployeeResource_Tasks", "Task_ProjectEmployeeResource")]
        public EntityCollection<Task_ProjectEmployeeResource> Task_ProjectEmployeeResource
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Task_ProjectEmployeeResource>("PSC_ERPModel.FK_Task_ProjectEmployeeResource_Tasks", "Task_ProjectEmployeeResource");
            }
            set
            {
                if ((value != null))
                {
    				bool stopChanging = false;
    				On_Task_ProjectEmployeeResource_Changing(ref value, ref stopChanging);//\\//
    				if(!stopChanging)
    				{
    					((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Task_ProjectEmployeeResource>("PSC_ERPModel.FK_Task_ProjectEmployeeResource_Tasks", "Task_ProjectEmployeeResource", value);
    					On_Task_ProjectEmployeeResource_Changed(this.Task_ProjectEmployeeResource);//\\//
    				}
    			}
            }
        }
    	public static String Task_ProjectEmployeeResource_EntityCollectionPropertyName { get { return "Task_ProjectEmployeeResource"; } }
    	partial void On_Task_ProjectEmployeeResource_Changing(ref EntityCollection<Task_ProjectEmployeeResource> newValue, ref bool stopChanging);
    	partial void On_Task_ProjectEmployeeResource_Changed(EntityCollection<Task_ProjectEmployeeResource> currentValue);
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("PSC_ERPModel", "FK_TaskDependencies_Tasks", "TaskDependency")]
        public EntityCollection<TaskDependency> TaskDependencies
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<TaskDependency>("PSC_ERPModel.FK_TaskDependencies_Tasks", "TaskDependency");
            }
            set
            {
                if ((value != null))
                {
    				bool stopChanging = false;
    				On_TaskDependencies_Changing(ref value, ref stopChanging);//\\//
    				if(!stopChanging)
    				{
    					((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<TaskDependency>("PSC_ERPModel.FK_TaskDependencies_Tasks", "TaskDependency", value);
    					On_TaskDependencies_Changed(this.TaskDependencies);//\\//
    				}
    			}
            }
        }
    	public static String TaskDependencies_EntityCollectionPropertyName { get { return "TaskDependencies"; } }
    	partial void On_TaskDependencies_Changing(ref EntityCollection<TaskDependency> newValue, ref bool stopChanging);
    	partial void On_TaskDependencies_Changed(EntityCollection<TaskDependency> currentValue);
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("PSC_ERPModel", "FK_TaskDependencies_Tasks1", "TaskDependency")]
        public EntityCollection<TaskDependency> TaskDependencies1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<TaskDependency>("PSC_ERPModel.FK_TaskDependencies_Tasks1", "TaskDependency");
            }
            set
            {
                if ((value != null))
                {
    				bool stopChanging = false;
    				On_TaskDependencies1_Changing(ref value, ref stopChanging);//\\//
    				if(!stopChanging)
    				{
    					((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<TaskDependency>("PSC_ERPModel.FK_TaskDependencies_Tasks1", "TaskDependency", value);
    					On_TaskDependencies1_Changed(this.TaskDependencies1);//\\//
    				}
    			}
            }
        }
    	public static String TaskDependencies1_EntityCollectionPropertyName { get { return "TaskDependencies1"; } }
    	partial void On_TaskDependencies1_Changing(ref EntityCollection<TaskDependency> newValue, ref bool stopChanging);
    	partial void On_TaskDependencies1_Changed(EntityCollection<TaskDependency> currentValue);
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("PSC_ERPModel", "FK_Tasks_Resource", "Resource")]
        public Resource Resource
        {//test
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Resource>("PSC_ERPModel.FK_Tasks_Resource", "Resource").Value;
            }
            set
            {
    			bool stopChanging = false;
    			On_Resource_Changing(ref value, ref stopChanging);//\\//
    			if(!stopChanging)
    			{
    				((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Resource>("PSC_ERPModel.FK_Tasks_Resource", "Resource").Value = value;
    				On_Resource_Changed(this.Resource);//\\//
    			}
    	    }
        }
    	public static String Resource_ReferencePropertyName { get { return "Resource"; } }
    	partial void On_Resource_Changing(ref Resource newValue, ref bool stopChanging);
    	partial void On_Resource_Changed(Resource currentValue);
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Resource> ResourceReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Resource>("PSC_ERPModel.FK_Tasks_Resource", "Resource");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Resource>("PSC_ERPModel.FK_Tasks_Resource", "Resource", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("PSC_ERPModel", "FK_Tasks_Project", "Project")]
        public Project Project
        {//test
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Project>("PSC_ERPModel.FK_Tasks_Project", "Project").Value;
            }
            set
            {
    			bool stopChanging = false;
    			On_Project_Changing(ref value, ref stopChanging);//\\//
    			if(!stopChanging)
    			{
    				((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Project>("PSC_ERPModel.FK_Tasks_Project", "Project").Value = value;
    				On_Project_Changed(this.Project);//\\//
    			}
    	    }
        }
    	public static String Project_ReferencePropertyName { get { return "Project"; } }
    	partial void On_Project_Changing(ref Project newValue, ref bool stopChanging);
    	partial void On_Project_Changed(Project currentValue);
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Project> ProjectReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Project>("PSC_ERPModel.FK_Tasks_Project", "Project");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Project>("PSC_ERPModel.FK_Tasks_Project", "Project", value);
                }
            }
        }

        #endregion

    }
}
